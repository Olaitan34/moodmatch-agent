[project]
name = "moodmatch-agent"
version = "0.1.0"
description = "An AI-powered A2A protocol agent that analyzes user mood and recommends personalized movies, music, and books using Gemini Flash 2.5"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "MoodMatch Team"}
]
keywords = ["ai", "agent", "a2a", "fastapi", "gemini", "mood-analysis", "recommendations"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # FastAPI framework with all extras
    "fastapi[all]>=0.115.12",
    
    # Pydantic AI for LLM integration (Gemini)
    "pydantic-ai>=0.4.2",
    
    # Async HTTP client
    "httpx>=0.28.1",
    
    # Environment variable management
    "python-dotenv>=1.0.0",
    
    # Spotify API integration
    "spotipy>=2.23.0",
    
    # HTTP requests for TMDB and Google Books APIs
    "requests>=2.32.0",
    
    # ASGI server with standard extras
    "uvicorn[standard]>=0.32.0",
    
    # Additional dependencies for robust operation
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "ruff>=0.6.0",
    "mypy>=1.8.0",
    "httpx>=0.28.1",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.28.1",
]

[project.urls]
Homepage = "https://github.com/Olaitan34/moodmatch-agent"
Repository = "https://github.com/Olaitan34/moodmatch-agent"
Issues = "https://github.com/Olaitan34/moodmatch-agent/issues"

[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["agents", "config", "models", "services"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py313"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=. --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
pythonpath = ["."]

[tool.coverage.run]
source = ["agents", "config", "models", "services"]
omit = ["tests/*", "**/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
